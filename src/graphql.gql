# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AddressEntity implements BaseEntity {
  city: String!
  country: String!

  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `created`.
  """
  createdAt: DateTime!

  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `deleted`.
  """
  deletedAt: DateTime
  district: String!

  """
  Property that defines an `uuid` string type, that represents the entity unique identifier.
  """
  id: ID!
  state: String!
  street: String!

  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `updated`.
  """
  updatedAt: DateTime!
}

interface BaseEntity {
  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `created`.
  """
  createdAt: DateTime!

  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `deleted`.
  """
  deletedAt: DateTime

  """
  Property that defines an `uuid` string type, that represents the entity unique identifier.
  """
  id: ID!

  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `updated`.
  """
  updatedAt: DateTime!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

input CreateAddressInput {
  city: String!
  country: String!
  district: String!
  state: String!
  street: String!
}

input CreateImageInput {
  title: String
  url: String!
}

input CreateItemInput {
  image: CreateImageInput
  name: String!
}

input CreatePointInput {
  address: CreateAddressInput!
  description: String!
  email: String!
  image: CreateImageInput!
  name: String!
  whatsapp: String!
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
}

input CursorPaging {
  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ImageEntity implements BaseEntity {
  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `created`.
  """
  createdAt: DateTime!

  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `deleted`.
  """
  deletedAt: DateTime

  """
  Property that defines an `uuid` string type, that represents the entity unique identifier.
  """
  id: ID!
  title: String

  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `updated`.
  """
  updatedAt: DateTime!
  url: String!
}

type ImageEntityConnection {
  """Array of edges."""
  edges: [ImageEntityEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type ImageEntityEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ImageEntity"""
  node: ImageEntity!
}

input ImageEntityFilter {
  and: [ImageEntityFilter!]
  or: [ImageEntityFilter!]
  title: StringFieldComparison
  url: StringFieldComparison
}

input ImageEntitySort {
  direction: SortDirection!
  field: ImageEntitySortFields!
  nulls: SortNulls
}

enum ImageEntitySortFields {
  title
  url
}

type ItemEntity implements BaseEntity {
  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `created`.
  """
  createdAt: DateTime!

  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `deleted`.
  """
  deletedAt: DateTime

  """
  Property that defines an `uuid` string type, that represents the entity unique identifier.
  """
  id: ID!
  image: ImageEntity!
  imageId: String
  name: String!

  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `updated`.
  """
  updatedAt: DateTime!
}

type ItemEntityConnection {
  """Array of edges."""
  edges: [ItemEntityEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type ItemEntityEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ItemEntity"""
  node: ItemEntity!
}

input ItemEntityFilter {
  and: [ItemEntityFilter!]
  imageId: StringFieldComparison
  name: StringFieldComparison
  or: [ItemEntityFilter!]
}

input ItemEntitySort {
  direction: SortDirection!
  field: ItemEntitySortFields!
  nulls: SortNulls
}

enum ItemEntitySortFields {
  imageId
  name
}

input LoginInput {
  """Property that defines a `string` object, that represents the password"""
  password: String!

  """Property that defines a `string` object, that represents the username"""
  username: String!
}

type Mutation {
  createImage(input: CreateImageInput!): ImageEntity!
  createItem(input: CreateItemInput!): ItemEntity!
  createPoint(input: CreatePointInput!): PointEntity!

  """Mutation responsible for creating a new entity"""
  createUser(input: CreateUserInput!): UserEntity!
  deleteImage(id: String!): ImageEntity!
  deleteItem(id: String!): ItemEntity!
  deletePoint(id: String!): PointEntity!

  """Mutation responsible for deleting some entity data"""
  deleteUser(id: String!): UserEntity!
  disableImage(id: String!): ImageEntity!
  disableItem(id: String!): ItemEntity!
  disablePoint(id: String!): PointEntity!

  """Mutation responsible for disabling some entity data"""
  disableUser(id: String!): UserEntity!
  enableImage(id: String!): ImageEntity!
  enableItem(id: String!): ItemEntity!
  enablePoint(id: String!): PointEntity!

  """Mutation responsible for enabling some entity data"""
  enableUser(id: String!): UserEntity!

  """Mutation responsible for validating the username and password."""
  login(input: LoginInput!): TokenModel!
  updateImage(id: String!, input: UpdateImageInput!): ImageEntity!
  updateItem(id: String!, input: UpdateItemInput!): ItemEntity!
  updatePoint(id: String!, input: UpdatePointInput!): PointEntity!

  """Mutation responsible for updating some entity data"""
  updateUser(id: String!, input: UpdateUserInput!): UserEntity!
}

type PageInfo {
  """The cursor of the last returned record."""
  endCursor: ConnectionCursor

  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor
}

type PointEntity implements BaseEntity {
  address: AddressEntity!
  addressId: String

  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `created`.
  """
  createdAt: DateTime!

  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `deleted`.
  """
  deletedAt: DateTime
  description: String
  email: String

  """
  Property that defines an `uuid` string type, that represents the entity unique identifier.
  """
  id: ID!
  image: ImageEntity!
  imageId: String
  name: String!

  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `updated`.
  """
  updatedAt: DateTime!
  whatsapp: String
}

type PointEntityConnection {
  """Array of edges."""
  edges: [PointEntityEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type PointEntityEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PointEntity"""
  node: PointEntity!
}

input PointEntityFilter {
  addressId: StringFieldComparison
  and: [PointEntityFilter!]
  description: StringFieldComparison
  email: StringFieldComparison
  imageId: StringFieldComparison
  name: StringFieldComparison
  or: [PointEntityFilter!]
  whatsapp: StringFieldComparison
}

input PointEntitySort {
  direction: SortDirection!
  field: PointEntitySortFields!
  nulls: SortNulls
}

enum PointEntitySortFields {
  addressId
  description
  email
  imageId
  name
  whatsapp
}

type Query {
  image(id: String!): ImageEntity!
  images(
    """Specify to filter the records returned."""
    filter: ImageEntityFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [ImageEntitySort!] = []
  ): ImageEntityConnection!
  item(id: String!): ItemEntity!
  items(
    """Specify to filter the records returned."""
    filter: ItemEntityFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [ItemEntitySort!] = []
  ): ItemEntityConnection!

  """Query responsible for finding the data of the request user."""
  me: UserEntity!

  """Used for testing the api connection"""
  ping: String!
  point(id: String!): PointEntity!
  points(
    """Specify to filter the records returned."""
    filter: PointEntityFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [PointEntitySort!] = []
  ): PointEntityConnection!

  """Query responsible for finding one entity based on the id parameter."""
  user(id: String!): UserEntity!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

type TokenModel {
  """Property that defines a `string` object, that represents the expiresIn"""
  expiresIn: String!

  """Property that defines a `string` object, that represents the token"""
  token: String!
}

input UpdateAddressInput {
  city: String!
  country: String!
  district: String!
  state: String!
  street: String!
}

input UpdateImageInput {
  title: String
  url: String!
}

input UpdateItemInput {
  image: UpdateImageInput!
  name: String!
}

input UpdatePointInput {
  address: UpdateAddressInput
  description: String
  email: String
  image: UpdateImageInput
  name: String
  whatsapp: String
}

input UpdateUserInput {
  email: String!
  name: String!
}

"""Entity that represents the project `user` entity."""
type UserEntity implements BaseEntity {
  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `created`.
  """
  createdAt: DateTime!

  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `deleted`.
  """
  deletedAt: DateTime
  email: String!

  """
  Property that defines an `uuid` string type, that represents the entity unique identifier.
  """
  id: ID!
  name: String!
  roles: [String!]!

  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `updated`.
  """
  updatedAt: DateTime!
}
