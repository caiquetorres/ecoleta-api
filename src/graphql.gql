# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface BaseEntity {
  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `created`.
  """
  createdAt: DateTime!

  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `deleted`.
  """
  deletedAt: DateTime

  """
  Property that defines an `uuid` string type, that represents the entity unique identifier.
  """
  id: ID!

  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `updated`.
  """
  updatedAt: DateTime!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

"""Input that handles all the data needed to create a new `item` entity."""
input CreateItemInput {
  """Property that defines a `string` object that represents the item name."""
  name: String!
}

"""Input that handles all the data needed to create a new `user` entity."""
input CreateUserInput {
  """
  Property that defines a `string` object, that represents the user email.
  """
  email: String!

  """
  Property that defines a `string` object, that represents the user name.
  """
  name: String!

  """
  Property that defines a `string` object, that represents the user password.
  """
  password: String!
}

input CursorPaging {
  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ItemEntity implements BaseEntity {
  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `created`.
  """
  createdAt: DateTime!

  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `deleted`.
  """
  deletedAt: DateTime

  """
  Property that defines an `uuid` string type, that represents the entity unique identifier.
  """
  id: ID!

  """Property that defines a `string` object that represents the item name."""
  name: String!

  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `updated`.
  """
  updatedAt: DateTime!
}

type ItemEntityConnection {
  """Array of edges."""
  edges: [ItemEntityEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type ItemEntityEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ItemEntity"""
  node: ItemEntity!
}

input ItemEntityFilter {
  and: [ItemEntityFilter!]
  name: StringFieldComparison
  or: [ItemEntityFilter!]
}

input ItemEntitySort {
  direction: SortDirection!
  field: ItemEntitySortFields!
  nulls: SortNulls
}

enum ItemEntitySortFields {
  name
}

input LoginInput {
  """Property that defines a `string` object, that represents the password"""
  password: String!

  """Property that defines a `string` object, that represents the username"""
  username: String!
}

type Mutation {
  """Mutation responsible for creating a new entity."""
  createItem(input: CreateItemInput!): ItemEntity!

  """Mutation responsible for creating a new entity"""
  createUser(input: CreateUserInput!): UserEntity!

  """Mutation responsible for validating the username and password."""
  login(input: LoginInput!): TokenModel!
}

type PageInfo {
  """The cursor of the last returned record."""
  endCursor: ConnectionCursor

  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor
}

type Query {
  """Query responsible for finding one entity based on the id parameter."""
  item(id: String!): ItemEntity!
  items(
    """Specify to filter the records returned."""
    filter: ItemEntityFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [ItemEntitySort!] = []
  ): ItemEntityConnection!

  """Query responsible for finding the data of the request user."""
  me: UserEntity!

  """Used for testing the api connection"""
  ping: String!

  """Query responsible for finding one entity based on the id parameter."""
  user(id: String!): UserEntity!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

type TokenModel {
  """Property that defines a `string` object, that represents the expiresIn"""
  expiresIn: String!

  """Property that defines a `string` object, that represents the token"""
  token: String!
}

"""Entity that represents the project `user` entity."""
type UserEntity implements BaseEntity {
  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `created`.
  """
  createdAt: DateTime!

  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `deleted`.
  """
  deletedAt: DateTime

  """
  Property that defines a `string` object, that represents the user email.
  """
  email: String!

  """
  Property that defines an `uuid` string type, that represents the entity unique identifier.
  """
  id: ID!

  """
  Property that defines a `string` object, that represents the user name.
  """
  name: String!

  """Property that defines an array with all the user roles."""
  roles: [String!]!

  """
  Property that defines a `Date` object, responsible for storing the time when the entity was `updated`.
  """
  updatedAt: DateTime!
}
